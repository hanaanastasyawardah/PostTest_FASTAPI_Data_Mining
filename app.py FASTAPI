from fastapi import FastAPI
from pydantic import BaseModel
import pickle
import pandas as pd
import xgboost as xgb

# Inisialisasi app FastAPI
app = FastAPI()

# Load model, scaler, dan X_train_columns
try:
    # Load model baru
    model = xgb.Booster()
    model.load_model("best_model_new.json")

    # Load scaler
    with open("scaler.pkl", "rb") as f:
        scaler = pickle.load(f)
        if not hasattr(scaler, "transform"):
            raise RuntimeError("File scaler.pkl tidak berisi objek scaler yang valid.")

    # Load X_train_columns
    with open("X_train_columns.pkl", "rb") as f:
        X_train_columns = pickle.load(f)
        if not isinstance(X_train_columns, list):
            raise RuntimeError("File X_train_columns.pkl tidak berisi daftar kolom yang valid.")
except FileNotFoundError as e:
    raise RuntimeError(f"File tidak ditemukan: {e}")
except Exception as e:
    raise RuntimeError(f"Error saat memuat file: {e}")

# Definisikan inputan yang diterima dari user
class StrokeInput(BaseModel):
    age: float
    hypertension: int
    heart_disease: int
    avg_glucose_level: float
    bmi: float
    smoking_status: int
    gender_Female: int
    work_type_Govt_job: int
    work_type_Never_worked: int
    work_type_Private: int
    work_type_Self_employed: int
    work_type_children: int
    glucose_category_Normal: int
    glucose_category_Prediabetes: int
    glucose_category_Diabetes: int

@app.post("/predict")
def predict_stroke(data: StrokeInput):
    try:
        # Masukkan input ke dalam DataFrame
        input_dict = {
            "age": data.age,
            "hypertension": data.hypertension,
            "heart_disease": data.heart_disease,
            "avg_glucose_level": data.avg_glucose_level,
            "bmi": data.bmi,
            "smoking_status": data.smoking_status,
            "gender_Female": data.gender_Female,
            "gender_Male": 1 - data.gender_Female,  # Gender Male dihitung dari Female
            "work_type_Govt_job": data.work_type_Govt_job,
            "work_type_Never_worked": data.work_type_Never_worked,
            "work_type_Private": data.work_type_Private,
            "work_type_Self-employed": data.work_type_Self_employed,
            "work_type_children": data.work_type_children,
            "glucose_category_Normal": data.glucose_category_Normal,
            "glucose_category_Prediabetes": data.glucose_category_Prediabetes,
            "glucose_category_Diabetes": data.glucose_category_Diabetes,
        }
        input_df = pd.DataFrame([input_dict])

        # Tambahkan kolom yang hilang dengan nilai default (misalnya, 0)
        for col in X_train_columns:
            if col not in input_df.columns:
                input_df[col] = 0

        # Pastikan urutan kolom sesuai dengan X_train_columns
        input_df = input_df[X_train_columns]

        # Transformasi input menggunakan scaler
        input_scaled = scaler.transform(input_df)

        # Prediksi menggunakan model
        dmatrix = xgb.DMatrix(input_scaled)
        prediction = model.predict(dmatrix)

        # Output prediksi
        if prediction[0] >= 0.5:
            result = "Berisiko Stroke"
        else:
            result = "Tidak Berisiko Stroke"

        return {"prediction": result}
    except Exception as e:
        return {"error": str(e)}
